"use strict";(self.webpackChunkancientbeast=self.webpackChunkancientbeast||[]).push([[688],{25688:(e,t,i)=>{i.r(t),i.d(t,{default:()=>c});var a=i(21094),r=i(83355),s=i(23315),n=i(18394),h=i(71956);const c=function(e){e.abilities[9]=[{trigger:"onEndPhase",_effectName:"Frostified",_getOffenseBuff:function(){return this.isUpgraded()?5:0},require:function(){var e=this;return this.creature.effects.forEach((function(t){t.name===e._effectName&&(t.alterations.offense=e._getOffenseBuff())})),this.creature.remainingMove<this.creature.stats.movement?(this.message="The creature moved this round.",!1):this.testRequirements()},activate:function(){this.creature.addEffect(new h.Q(this._effectName,this.creature,this.creature,"",{alterations:{frost:5,defense:5,offense:this._getOffenseBuff()},stackable:!0},e))}},{trigger:"onQuery",_targetTeam:r.S.Enemy,require:function(){return!!this.testRequirements()&&!!this.atLeastOneTarget(this.creature.getHexMap(s.y7),{team:this._targetTeam})},query:function(){var t=this;e.grid.queryCreature({fnOnConfirm:function(){t.animation.apply(t,arguments)},team:this._targetTeam,id:this.creature.id,flipped:this.creature.flipped,hexes:this.creature.getHexMap(s.y7)})},activate:function(t){var i=this;i.end(),e.Phaser.camera.shake(.01,80,!0,e.Phaser.camera.SHAKE_HORIZONTAL,!0);var r=i.damages;this.isUpgraded()&&t.size<this.creature.size||(r.pierce=0);var s=new a.h(i.creature,r,1,[new h.Q(this.title,this.creature,this.target,"",{alterations:{frost:-1},stackable:!0},e)],e);t.takeDamage(s)}},{trigger:"onQuery",_targetTeam:r.S.Enemy,require:function(){return!!this.testRequirements()&&!!this.atLeastOneTarget(this.creature.getHexMap(s.y7),{team:this._targetTeam})},query:function(){var t=this;e.grid.queryCreature({fnOnConfirm:function(){t.animation.apply(t,arguments)},team:this._targetTeam,id:this.creature.id,flipped:this.creature.flipped,hexes:this.creature.getHexMap(s.y7)})},activate:function(t){var i=this;i.end(),e.Phaser.camera.shake(.02,222,!0,e.Phaser.camera.SHAKE_VERTICAL,!0);var r=[];this.isUpgraded()&&r.push(new h.Q(this.title,this.creature,t,"",{alterations:{defense:-10},stackable:!0,turnLifetime:1,deleteTrigger:"onStartPhase"},e));var s=new a.h(i.creature,i.damages,1,r,e),n=t.takeDamage(s);n.kill||""!==n.damageObj.status||t.delay()}},{trigger:"onQuery",directions:[1,1,1,1,1,1],_targetTeam:r.S.Both,_getDistance:function(){return this.isUpgraded()?0:6},require:function(){if(!this.testRequirements())return!1;var e=this.creature,t=e.player.flipped?e.x-e.size+1:e.x;return!!this.testDirection({team:this._targetTeam,x:t,directions:this.directions,distance:this._getDistance(),stopOnCreature:!1})},query:function(){var t=this,i=this.creature,a=i.player.flipped?i.x-i.size+1:i.x;e.grid.queryDirection({fnOnConfirm:function(){t.animation.apply(t,arguments)},team:this._targetTeam,id:i.id,requireCreature:!0,x:a,y:i.y,directions:this.directions,distance:this._getDistance(),stopOnCreature:!1})},activate:function(t){var i=this;i.end();for(var r=0;r<t.length;r++)if(t[r].creature instanceof n.j){var s=t[r].creature,h={pierce:i.damages.pierce,frost:6-r};h.frost<0&&(h.frost=0);var c=new a.h(i.creature,h,1,[],e),f=s.takeDamage(c);if(e.Phaser.camera.shake(.02,80,!0,e.Phaser.camera.SHAKE_HORIZONTAL,!0),"Shielded"===f.damageObj.status||f.damages&&f.damages.total<=0)break}}}]}},71956:(e,t,i)=>{i.d(t,{Q:()=>r});var a=i(18394);class r{constructor(e,t,i,a,r,s){this.effectFn=()=>{},this.requireFn=e=>!0,this.alterations={},this.turnLifetime=0,this.deleteTrigger="onStartOfRound",this.stackable=!0,this.specialHint=void 0,this.deleteOnOwnerDeath=!1,this._trap=void 0,this.attacker=void 0,this.id=s.effectId++,this.game=s,this.name=e,this.owner=t,this.target=i,this.trigger=a,this.creationTurn=s.turn;for(const e of Object.keys(r))e in this&&(this[e]=r[e]);s.effects.push(this)}animation(...e){e?this.activate(...e):this.activate()}activate(e){if(!this.requireFn(e))return!1;e instanceof a.j&&e.addEffect(this),this.effectFn(this,e)}deleteEffect(){if("effects"in this.target){const e=this.target.effects.indexOf(this);this.target.effects[e]?this.target.effects.splice(e,1):console.warn("Failed to find effect on target.",this)}const e=this.game.effects.indexOf(this);this.game.effects[e]?this.game.effects.splice(e,1):console.warn("Failed to find effect on game.",this),"updateAlteration"in this.target&&this.target.updateAlteration()}get trap(){return this._trap}set trap(e){this._trap=e}}}}]);